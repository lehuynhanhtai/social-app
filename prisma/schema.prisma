generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  role           Role      @default(USER)
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  backgroundUser String?
  birthDay       DateTime?
  gender         Gender?
  slogan         String?
  createdAt      DateTime  @default(now())
  accounts       Account[]
  sessions       Session[]
  posts          Post[]
  comments       Comment[]
  followers      Follow[]  @relation("followers")
  following      Follow[]  @relation("following")
  likes          Like[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id         String    @id @default(cuid())
  slug       String    @unique
  title      String
  content    String
  img        String?
  views      Int       @default(0)
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  comments   Comment[]
  likes      Like[]

  @@index([categoryId])
  @@index([userId])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  img         String?
  createdAt   DateTime @default(now())
  posts       Post[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  likes     Like[]

  @@index([userId])
  @@index([postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  follower    User   @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
